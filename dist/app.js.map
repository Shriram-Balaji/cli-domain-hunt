{"version":3,"file":"app.js","sources":["../src/app.js"],"sourcesContent":["\"use strict\";\nconst fetch = require(\"node-fetch\");\nconst chalk = require(\"chalk\");\nconst terminalLink = require(\"terminal-link\");\nconst { error, success, debug, httpUtil } = require(\"util-box\");\nconst config = require(\"./config\");\nconst wait = require(\"./wait\");\n\n// fetch alternate domain-name suggestions\nasync function fetchSuggestions(input) {\n\tlet reqUrl = httpUtil.makeQueryString({ domain: input }, `${config.API_ENDPOINT}/suggestions`);\n\tconst stopSpinner = wait(\"Hunting Domain Suggestions\");\n\ttry {\n\t\tlet res = await fetch(reqUrl);\n\t\tif (!/2[0-9]/.test(res.status)) {\n\t\t\terror(\"Error! Unable to fetch suggestions.\", res.status);\n\t\t} else {\n\t\t\tlet body = await res.json();\n\t\t\tconsole.log(\n\t\t\t\t` ${chalk.white(`\nðŸŒŽ  Here are some suggestions similar to ${chalk.cyan.underline(input)}`)} `\n\t\t\t);\n\t\t\tbody.map(domains => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${chalk.greenBright(terminalLink(domains.domain, `${config.PROVIDER_ENDPOINT}${domains.domain}`))} `\n\t\t\t\t);\n\t\t\t});\n\t\t\tstopSpinner();\n\t\t}\n\t} catch (err) {\n\t\terror(`Sorry! Unable to fetch suggestions due to Error ${err}`);\n\t\tstopSpinner();\n\t}\n}\n\n// check domain name availability\nasync function checkAvailability(input) {\n\tdebug(`Checking availability for ${input}`);\n\tlet reqUrl = httpUtil.makeQueryString({ domain: input }, `${config.API_ENDPOINT}/available`);\n\tconst stopSpinner = wait(\"Hunting domain availability\");\n\ttry {\n\t\tlet res = await fetch(reqUrl);\n\t\tif (!/2[0-9]/.test(res.status)) {\n\t\t\tdebug(`Error! Expected 2xx, found ${res.status}`);\n\t\t\terror(`\nUnable to fetch Domain Availability! Error: ${res.status}`);\n\t\t\tstopSpinner();\n\t\t} else {\n\t\t\tlet body = await res.json();\n\t\t\tif (body.available) {\n\t\t\t\tif (body.period > 1) body.numberofYears = \"years\";\n\t\t\t\telse body.numberofYears = \"year\";\n\t\t\t\tlet domainLink = terminalLink(body.domain, `${config.PROVIDER_ENDPOINT}${body.domain}`);\n\t\t\t\tconsole.log(`\n  ${chalk.bold.underline(`Available`)}\n  ${chalk.dim(\"The prices are subject to vary based on discounts, taxes and other fees\")}\n  Domain : ${chalk.greenBright(domainLink)}\n  Price  : ${chalk.white(body.price / 1000000)} ${chalk.yellowBright(body.currency)}\n  Period : ${chalk.white(body.period)} ${body.numberofYears}\n`);\n\t\t\t} else {\n\t\t\t\tconsole.log(`\nOh no! That domain seems to be taken.\n\t\t\t\t`);\n\t\t\t\tfetchSuggestions(input);\n\t\t\t}\n\t\t\tstopSpinner();\n\t\t}\n\t} catch (err) {\n\t\terror(`\nUnable to Fetch domain availability ${err}`);\n\t\tstopSpinner();\n\t}\n}\n\nconst performComparison = input => {\n\tdebug(`comparing the ${input}`);\n};\n\nconst app = (input, flags) => {\n\tif (!input) {\n\t\tconsole.log(`\n${chalk.red(\n\t\t\t`Missing or invalid input: domain-name\nPlease enter a valid domain name`\n\t\t)}\n`);\n\t\tconsole.log(`${chalk.gray(\"Use the --help to view usage instructions\")}`);\n\t} else {\n\t\tif (flags.compare || flags.c) performComparison(input);\n\t\tif (flags.suggestions || flags.s) fetchSuggestions(input);\n\t\telse checkAvailability(input);\n\t}\n};\n\nmodule.exports = app;\n"],"names":["const","fetch","require","chalk","terminalLink","config","wait","fetchSuggestions","input","reqUrl","httpUtil","makeQueryString","domain","stopSpinner","err","error","then","test","res","$await_5","status","json","body","$await_6","console","log","white","let","debug","period","$If_4","this","$Try_2_Catch"],"mappings":"AACAA,IAAMC,EAAQC,QAAQ,cAChBC,EAAQD,QAAQ,SAChBE,EAAeF,QAAQ,mBACeA,QAAQ,6CAC9CG,EAASH,QAAQ,YACjBI,EAAOJ,QAAQ,UAGrB,SAAeK,EAAiBC,GAAhC,yCACKC,EAASC,EAASC,iBAAkBC,OAAQJ,GAAYH,+BACtDQ,EAAcP,EAAK,gGAkBhBQ,cACRC,qDAAyDD,GACzDD,+BAnBD,UACW,OAAMZ,EAAMQ,GAAZO,2BACV,MAAK,SAASC,MADVC,EAAMC,GACaC,QAGLF,EAAIG,OAAVL,4BAAPM,EAAOC,EACXC,QAAQC,QACHtB,EAAMuB,qOAJXX,EAAM,sCAAuCG,EAAIE,gKA0E9CZ,2FApDLmB,QACIC,8DAAwDpB,mJAiC3DO,kNAnBMO,gBADCA,EAAKO,0EAUVL,QAAQC,2aAfTG,2GAEiBE,OAANC,gDA4BUC,YAGJD,MAARC"}